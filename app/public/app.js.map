{"version":3,"sources":["../src/app.js"],"names":["Main","props","state","loading","weather","cities","error","key","name","loadCities","getWeather","then","setState","http","XMLHttpRequest","open","addEventListener","JSON","parse","response","send","city","Promise","resolve","reject","daily","weatherCards","map","dayofweather","day","Date","dt","toDateString","icon","description","temp","cityoptions","e","updateWeather","target","value","toUpperCase","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","sourcesContent":["class Main extends React.Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      loading: true\n    }\n    this.weather = []\n    this.cities = []\n    this.error = false\n  }\n\n  componentDidMount () {\n    this.cities = {\n      key: 'vancouver',\n      name: 'Vancouver, BC'\n    }\n    this.loadCities()\n    this.getWeather()\n    .then((weather) =>{\n      this.weather = weather\n      this.setState({loading:false})\n    })\n    .catch((error) => {\n      this.setState({loading:false})\n      this.error = true\n    })\n  }\n\n  loadCities () {\n    let http = new XMLHttpRequest()\n    http.open('POST', '/cities')\n    http.addEventListener('loadend', () => {\n      this.cities = JSON.parse(http.response)\n    })\n    http.addEventListener('error', (error) => {\n      this.error = error\n    })\n    http.send()\n  }\n\n  getWeather (city) {\n    return new Promise ((resolve, reject) => {\n      let weather = []\n      let http = new XMLHttpRequest()\n      http.open('POST', '/seven/' + city)\n      http.addEventListener('loadend', () => {\n        weather = JSON.parse(http.response).daily\n        resolve(weather)\n      })\n      http.addEventListener('error', () => {\n        reject('error fetching weather')\n      })\n      http.send()\n    }) \n  }\n\n  updateWeather (city) {\n    this.setState({loading:true}, () => {\n      this.getWeather(city)\n      .then((weather) => {\n        this.weather = weather\n        this.setState({loading:false})\n      })\n      .catch((error) => {\n        this.error = error\n        this.setState({loading:false})\n      })\n    })\n  }\n\n  render () {\n    let weatherCards = () => {\n      return this.weather.map((dayofweather) => {\n        let day = new Date(dayofweather.dt * 1000)\n        return <div className=\"weathercard\">\n          <p className=\"date\">{day.toDateString()}</p>\n          <p className=\"icon\">\n            <img src={`http://openweathermap.org/img/wn/${dayofweather.weather[0].icon}@2x.png`} />\n          </p>\n          <p>{dayofweather.weather[0].description}</p>\n          <p>{dayofweather.temp.day}&deg;C</p>\n        </div>\n      })\n    }\n    let cityoptions = () => {\n      return <select onChange={(e) => {this.updateWeather(e.target.value)}}>\n        {this.cities.map((city) => {\n          return <option value={city.key}>{city.name.toUpperCase()}</option>\n        })}\n      </select>\n    }\n    return (\n      <main>\n        <h1>The Weather Forecast</h1>\n        <p>\n          {cityoptions()}\n        </p>\n        <div className=\"container\">\n          { this.state.loading ? <p className=\"date\">LOADING...</p> : weatherCards()}\n        </div>\n      </main>\n    )\n  }\n}\n\nReactDOM.render(<Main />, document.getElementById('incredible-purpose'));\n"],"file":"app.js"}